/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server;

/**
 *
 * @author lauwrentsio
 */
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class chatServer extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form chatServer
     */
    String chatClient, chatServer;
    Socket incoming;
    ServerSocket s;
    Thread t;
    ArrayList<HandleSocket> clients = new ArrayList<HandleSocket>();
//    chat chat;

    public chatServer() {
        initComponents();
        setLocationRelativeTo(null);
        try {
            s = new ServerSocket(6000);
            if (t == null) {
                t = new Thread(this, "Server");
                t.start();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "error koneksi " + ex);
        }
    }

    public void run() {
        while (true) {
            try {
                incoming = s.accept();
                HandleSocket hs = new HandleSocket(this, incoming);
                hs.start();
                clients.add(hs);
            } catch (IOException ex) {
                System.out.println("formserver run = " + ex);
            }
        }
    }

    public void showChat(String msg) {
//        txtChat.append(msg + "\n");
//        broadCast(msg);
        System.out.println(msg);
        String msgSplit[] = msg.split(":");
        String user = msgSplit[0];
        String content = msgSplit[1];

        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Calendar cal = Calendar.getInstance();
        String dateTime = dateFormat.format(cal.getTime());

        if (msg.contains("$Kode")) {
//            String re[] = msg.split(":");
            String houseid = msgSplit[2];
            String username = msgSplit[0];
            String dateStart = msgSplit[3];
            String tahunSewa = msgSplit[4];
            String alamat = msgSplit[5];
            String firstname = msgSplit[6];
            String lastname = msgSplit[7];
            String telp = msgSplit[8];

            book(Integer.parseInt(houseid), username, "0", dateStart, Integer.parseInt(tahunSewa), dateTime, alamat, firstname, lastname, telp);
//            chat = new chat(Integer.parseInt(houseid), username, "0", dateStart, Integer.parseInt(tahunSewa), dateTime, alamat, firstname, lastname, telp);
//            chat.insertReservasi();
            //JOptionPane.showMessageDialog(this, "Reservation Successful");
            String suc = "Reservation Successful";
            broadCast(suc);
        }

//        chat = new chat(content, dateTime, user);
//        chat.insert();

        txtChat.append(msg + "\n");
        broadCast(msg);
        insertChat(content, dateTime, user);

    }

    public void broadCast(String msg) {
        for (HandleSocket hs : clients) {
            hs.sendChat(msg);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtChat = new javax.swing.JTextArea();
        txtPesan = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtChat.setEditable(false);
        txtChat.setColumns(20);
        txtChat.setRows(5);
        jScrollPane1.setViewportView(txtChat);

        txtPesan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesanActionPerformed(evt);
            }
        });

        btnSend.setBackground(new java.awt.Color(250, 250, 210));
        btnSend.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(250, 250, 210));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(160, 82, 45));
        jLabel1.setText("Admin");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(173, 173, 173)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtPesan, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSend, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPesan, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                    .addComponent(btnSend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPesanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesanActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        // TODO add your handling code here:
        txtChat.append("Admin: " + txtPesan.getText() + "\n");
        broadCast("Admin : " + txtPesan.getText());
    }//GEN-LAST:event_btnSendActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chatServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chatServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chatServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chatServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new chatServer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSend;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtChat;
    private javax.swing.JTextField txtPesan;
    // End of variables declaration//GEN-END:variables

    public void broadcastJoin(HandleSocket _hsclient, String msg) {
        String msgSplit[] = msg.split(";-");
        String username = msgSplit[0];

        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Calendar cal = Calendar.getInstance();
        String dateTime = dateFormat.format(cal.getTime());

//        msg = "-- " + username + " has joined to the group chat";
//        
//       txtChat.append(msg + "\n");
        for (HandleSocket hs : clients) {
            if (hs != _hsclient) {
                hs.sendChat(msg);
            }
        }
    }

//    private static String book(java.lang.String pin, int houseId, java.lang.String username, java.lang.String status, java.lang.String dateStart, int rentDuration, java.lang.String booktime, java.lang.String userAddress, java.lang.String firstName, java.lang.String lastName, java.lang.String telephone) {
//        com.nginepaja.peter.UserWS_Service service = new com.nginepaja.peter.UserWS_Service();
//        com.nginepaja.peter.UserWS port = service.getUserWSPort();
//        return port.book(pin, houseId, username, status, dateStart, rentDuration, booktime, userAddress, firstName, lastName, telephone);
//    }

    private static String insertChat(java.lang.String content, java.lang.String time, java.lang.String username) {
        com.nginepaja.peter.UserWS_Service service = new com.nginepaja.peter.UserWS_Service();
        com.nginepaja.peter.UserWS port = service.getUserWSPort();
        return port.insertChat(content, time, username);
    }

    private static String book(int houseId, java.lang.String username, java.lang.String status, java.lang.String dateStart, int rentDuration, java.lang.String booktime, java.lang.String userAddress, java.lang.String firstName, java.lang.String lastName, java.lang.String telephone) {
        com.nginepaja.peter.UserWS_Service service = new com.nginepaja.peter.UserWS_Service();
        com.nginepaja.peter.UserWS port = service.getUserWSPort();
        return port.book(houseId, username, status, dateStart, rentDuration, booktime, userAddress, firstName, lastName, telephone);
    }
}
